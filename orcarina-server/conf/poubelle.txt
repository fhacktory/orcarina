
/*
    MidiDevice device;
    MidiDevice.Info[] infos = MidiSystem.getMidiDeviceInfo();
    for (int i = 0; i < infos.length; i++) {
      try {
        device = MidiSystem.getMidiDevice(infos[i]);
        //does the device have any transmitters?
        //if it does, add it to the device list
        System.out.println(infos[i]);

        //get all transmitters
        List<Transmitter> transmitters = device.getTransmitters();
        //and for each transmitter

        for(int j = 0; j<transmitters.size();j++) {
          //create a new receiver
          transmitters.get(j).setReceiver(
              //using my own MidiInputReceiver
              new MidiInputReceiver(device.getDeviceInfo().toString())
          );
        }

        Transmitter trans = device.getTransmitter();
        trans.setReceiver(new MidiInputReceiver(device.getDeviceInfo().toString()));

        //open each device
        device.open();
        //if code gets this far without throwing an exception
        //print a success message
        System.out.println(device.getDeviceInfo()+" Was Opened");


      } catch (MidiUnavailableException e) {}
  }

    //tried to write my own class. I thought the send method handles an MidiEvents sent to it
    public class MidiInputReceiver implements Receiver {
      public String name;
      public MidiInputReceiver(String name) {
        this.name = name;
      }
      public void send(MidiMessage msg, long timeStamp) {
        System.out.println("midi received");
      }
      public void close() {}
    }
  */

  /*
    private boolean pause = false;
    final Object    sync = new Object();
      final OSCServer c;
      try {
        c = OSCServer.newUsing(OSCServer.TCP, 49162, false );
        // now add a listener for incoming messages from
        // any of the active connections
        c.addOSCListener( new OSCListener() {
          public void messageReceived( OSCMessage m, SocketAddress addr, long time )
          {
            // first of all, send a reply message (just a demo)
            try {
              c.send( new OSCMessage( "/done", new Object[] { m.getName() }), addr );
            }
            catch( IOException e1 ) {
              e1.printStackTrace();
            }

            if( m.getName().equals( "/pause" )) {
              // tell the main thread to pause the server,
              // wake up the main thread
              pause = true;
              synchronized( sync ) {
                sync.notifyAll();
              }
            } else if( m.getName().equals( "/quit" )) {
              // wake up the main thread
              synchronized( sync ) {
                sync.notifyAll();
              }
            } else if( m.getName().equals( "/dumpOSC" )) {
              // change dumping behaviour
              c.dumpOSC( ((Number) m.getArg( 0 )).intValue(), System.err );
            }
          }
        });
        try {
          do {
            if( pause ) {
              System.out.println( "  waiting four seconds..." );
              try {
                Thread.sleep( 4000 );
              }
              catch( InterruptedException e1 ) {}
              pause = false;
            }
            System.out.println( "  start()" );
            // start the server (make it attentive for incoming connection requests)
            c.start();
            try {
              synchronized( sync ) {
                sync.wait();
              }
            }
            catch( InterruptedException e1 ) {}
            System.out.println( "  stop()" );
            c.stop();
          } while( pause );
        }
        catch( IOException e1 ) {
          e1.printStackTrace();
        }
      } catch (IOException e) {
        Logger.error("OSC error", e);
      }
      */